'''
Author: Aiden Chang
Revised by: 
Winter 2021, cs257
Code will contain arg parse commands. Please type python3 olympics.py -h for more help
'''

import psycopg2
import argparse
import sys
from config import password 
from config import database
from config import user

def connect_to_database():
    '''
    Will establish a connection to the database.
    If an error ocurs, it will be printed out ten the code will exit

    Returns:
        connection: the connection object to the database
    '''
    try:
        connection = psycopg2.connect(database=database, user=user, password=password)
        return connection
    except Exception as e:
        print(e)
        exit()

def getCursor(query, connection, search_string = None):
    '''
    Query the database, creating a cursor object allowing you to use to iterate over the rows generated by your query.

    Parameters:
        query: the query you would like your cursor to iterate over
        connection: the connection object to your database
        search_string: optional argument. If a search string is specified, the cursor will execute the query with the userinput( the search string)
    Returns:
        cursor: the cursor object that can be used to iterate rows over the specified query
    '''
    try:
        cursor = connection.cursor()
        if search_string != None:
            cursor.execute(query, (search_string,))
        else:
            cursor.execute(query)
        return cursor
    except Exception as e:
        print(e)
        exit()

def get_parsed_args():
    '''
    generates the parsed args arguments.

    Returns:
        args: the parser args object
    '''
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter) 
    '''
    RawTextHelpFormatter is for the newline characters
    '''
    group = parser.add_mutually_exclusive_group()

    group.add_argument("--listAthletes", "-la", help = '''
    Example: python3 olympics.py -la JPN
    Prints the list of the names of all the athletes from a specified NOC. Specified NOC must be capitalized.
    '''
    , type = str, dest= 'noc_name', nargs = 1)

    group.add_argument("--nocMedals", '-nm' , help = '''
    Example: python3 olympics.py -nm 
    Lists all the NOCs and the number of gold medals they have won, in decreasing order of the number of gold medals.
    '''
    , action = "store_true")

    group.add_argument("--findAthlete", "-fa" , help = '''
    Example: python3 olympics.py -fa Greg
    Will search and display all athletes that contain the given string. Capitalization matters (the first character in every first and last name will be capitalized).
    For each athlete, it will list all the medals they have won, the year they won it, and the event that they won it in. Sorted by athlete name.
    '''
    , type = str, dest= 'string', nargs = 1)

    '''
    dest specifies the argument name on the help screen, inspired from stack overflow.
    '''

    args = parser.parse_args()

    return args

def get_noc_athletes_list(noc_name,connection):
    '''

    Parameters:
        noc_name: the user specified noc region name
        connection: the connection object to the database
    Returns:
        cursor: the cursor object that can be used to iterate rows over the specified query
    '''
    query = "\
        SELECT nocs.region, athletes.full_name \
        FROM athletes, nocs, athletes_nocs \
        WHERE athletes.id = athletes_nocs.athlete_id \
        AND nocs.id = athletes_nocs.noc_id \
        AND nocs.noc_name = %s; \
        "
    
    cursor = getCursor(query,connection,noc_name)

    return cursor

def get_noc_medals_list(connection):
    '''
    Parameters:
        connection: the connection object to the database
    Returns:
        cursor: the cursor object that can be used to iterate rows over the specified query
    '''
    query = "\
        SELECT nocs.noc_name, COUNT(medals.medal)\
        FROM nocs, athletes, medals, athletes_nocs\
        WHERE medals.medal = 'Gold'\
        AND medals.athlete_id = athletes.id\
        AND nocs.id = athletes_nocs.noc_id\
        AND athletes.id = athletes_nocs.athlete_id\
        GROUP BY nocs.noc_name\
        ORDER BY COUNT(medals.medal) DESC;\
        "
    
    cursor = getCursor(query, connection)

    return cursor

def get_athlete_and_medal_list(contain_string, connection):
    '''
    Parameters:
        contain_string: the user specified string that is contained 
        connection: the connection object to the database
    Returns:
        cursor: the cursor object that can be used to iterate rows over the specified query
    '''
    query = "\
        SELECT athletes.full_name, medals.medal, games.games, events.event_name\
        FROM events, games, medals, athletes\
        WHERE athletes.full_name LIKE '%" + contain_string + "%'\
        AND games.id = medals.game_id\
        AND events.id = medals.event_id\
        AND athletes.id = medals.athlete_id\
        ORDER BY athletes.full_name;\
        "
    '''
    couldn't use the %s format here
    '''
    cursor = getCursor(query, connection)

    return cursor

def print_lists(cursor,title):
    '''
    prints the rows from the cursor

    Parameters:
        cursor: the cursor object that can be used to iterate rows over the specified query
        title: the string you wish to print out on the top
    '''
    print(title)
    
    for row in cursor:
        print_string = ''
        for i in range(len(row)):
            print_string = print_string + ' || ' + str(row[i])
        print(print_string)
    print()

def main():
    parsed_args = get_parsed_args()
    connection = connect_to_database()
    if parsed_args.noc_name != None:
        noc_athletes_list = get_noc_athletes_list(parsed_args.noc_name[0],connection)
        print_lists(noc_athletes_list, \
            '==== All Athletes in ' + parsed_args.noc_name[0] + ' region ====')
    

    elif parsed_args.nocMedals == True:
        noc_medals_list = get_noc_medals_list(connection)
        print_lists(noc_medals_list, \
            "==== NOCs and their gold medals ====")
    
    elif parsed_args.string != None:
        print("yes")
        athlete_list = get_athlete_and_medal_list(parsed_args.string[0], connection)
        print_lists(athlete_list, \
            "==== List of athletes that contains the string " + parsed_args.string[0] + " and the medals they have won ====")

    else:
        print("You do not specify any arguments. Type --help for more information.", file=sys.stderr)

    connection.close()


if __name__ == '__main__':
	main()